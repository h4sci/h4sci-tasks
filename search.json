[
  {
    "objectID": "programming_exercises.html",
    "href": "programming_exercises.html",
    "title": "Programming Exercises",
    "section": "",
    "text": "What is the evolution path of code, ideally?\n\n\n\n\n\n\n\n\n\n\n\nWhich of these types of data is most persistent?\n\n\n\n\n\n\n\n\n\n\n\nWhich of these file formats are interoperable?\n\n\n\n\n\n\n\n\n\n\n\nWhich of these file formats are binary?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nThink about what format the non-binary file formats are in!\n\n\n\n\n\nWhat are the ideal ways to store nested data on disk (in a file)?\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s compare the Task 2.1 on sorting students to cards in R and Python:\n\n\n\n\n\n\nYour turn!\n\n\n\nWithout looking at the answers, try to guess what the result would be in python and R, and then check your answer!\n\n\ncards &lt;- c(\"Kings\", \"Jack\", \"Aces\", \"Queens\", \"Tens\")\nstudents &lt;- create_students(20)\n\nsplit &lt;- split_students(students, cards)\nres &lt;- split\n\nres2 &lt;- res\nres2[[\"Kings\"]] &lt;- c(\"Student A\", \"Student B\") \n\nprint(res)\nprint(res2)\n\n\nAnswer\n\n\n\n[1] \"res -----------------\"\n\n\n$Kings\n[1] \"Student A\" \"Student B\" \"Student C\" \"Student D\" \"Student E\" \"Student F\"\n\n$Jack\n[1] \"Student G\" \"Student H\" \"Student I\" \"Student J\" \"Student K\"\n\n$Aces\n[1] \"Student L\" \"Student M\" \"Student N\" \"Student O\" \"Student P\"\n\n$Queens\n[1] \"Student Q\" \"Student R\" \"Student S\" \"Student T\" \"Student U\"\n\n$Tens\n[1] \"Student V\" \"Student W\" \"Student X\" \"Student Y\" \"Student Z\"\n\n\n[1] \"res2 -----------------\"\n\n\n$Kings\n[1] \"Student A\" \"Student B\"\n\n$Jack\n[1] \"Student G\" \"Student H\" \"Student I\" \"Student J\" \"Student K\"\n\n$Aces\n[1] \"Student L\" \"Student M\" \"Student N\" \"Student O\" \"Student P\"\n\n$Queens\n[1] \"Student Q\" \"Student R\" \"Student S\" \"Student T\" \"Student U\"\n\n$Tens\n[1] \"Student V\" \"Student W\" \"Student X\" \"Student Y\" \"Student Z\"\n\n\n\nfrom string import ascii_uppercase\n\ndef create_students(num_students):\n    return [f\"Student {ascii_uppercase[i]}\" for i in range(num_students)]\n\ndef split_students(students, groups):\n\n    n = len(students) // len(groups)\n    remainder = len(students) % len(groups)\n    split = []\n    start = 0\n    for i in range(len(groups)):\n        end = start + n + (1 if i &lt; remainder else 0)\n        split.append(students[start:end])\n        start = end\n    return split\n\ncards = [\"Kings\", \"Jack\", \"Aces\", \"Queens\", \"Tens\"]\nstudents = create_students(20)\n\nsplit = split_students(students, cards)\nres = dict(zip(cards, split))\n\n## Now compare the result of creating a reference with the one in python \nres2 = res\n# if we change res2, does res change?\nres2[\"Kings\"] = [\"Student A\", \"Student B\"]\n\nprint(f\"{res=}\")\nprint(f\"{res2=}\")\n\n\nAnswer\n\n\n\nres={'Kings': ['Student A', 'Student B'], 'Jack': ['Student E', 'Student F', 'Student G', 'Student H'], 'Aces': ['Student I', 'Student J', 'Student K', 'Student L'], 'Queens': ['Student M', 'Student N', 'Student O', 'Student P'], 'Tens': ['Student Q', 'Student R', 'Student S', 'Student T']}\n\n\nres2={'Kings': ['Student A', 'Student B'], 'Jack': ['Student E', 'Student F', 'Student G', 'Student H'], 'Aces': ['Student I', 'Student J', 'Student K', 'Student L'], 'Queens': ['Student M', 'Student N', 'Student O', 'Student P'], 'Tens': ['Student Q', 'Student R', 'Student S', 'Student T']}"
  },
  {
    "objectID": "programming_exercises.html#exercise-1",
    "href": "programming_exercises.html#exercise-1",
    "title": "Programming Exercises",
    "section": "",
    "text": "What is the evolution path of code, ideally?"
  },
  {
    "objectID": "programming_exercises.html#exercise-2",
    "href": "programming_exercises.html#exercise-2",
    "title": "Programming Exercises",
    "section": "",
    "text": "Which of these types of data is most persistent?"
  },
  {
    "objectID": "programming_exercises.html#exercise-3",
    "href": "programming_exercises.html#exercise-3",
    "title": "Programming Exercises",
    "section": "",
    "text": "Which of these file formats are interoperable?"
  },
  {
    "objectID": "programming_exercises.html#exercise-4",
    "href": "programming_exercises.html#exercise-4",
    "title": "Programming Exercises",
    "section": "",
    "text": "Which of these file formats are binary?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nThink about what format the non-binary file formats are in!"
  },
  {
    "objectID": "programming_exercises.html#exercise-5",
    "href": "programming_exercises.html#exercise-5",
    "title": "Programming Exercises",
    "section": "",
    "text": "What are the ideal ways to store nested data on disk (in a file)?"
  },
  {
    "objectID": "programming_exercises.html#exercise-6",
    "href": "programming_exercises.html#exercise-6",
    "title": "Programming Exercises",
    "section": "",
    "text": "Let’s compare the Task 2.1 on sorting students to cards in R and Python:\n\n\n\n\n\n\nYour turn!\n\n\n\nWithout looking at the answers, try to guess what the result would be in python and R, and then check your answer!\n\n\ncards &lt;- c(\"Kings\", \"Jack\", \"Aces\", \"Queens\", \"Tens\")\nstudents &lt;- create_students(20)\n\nsplit &lt;- split_students(students, cards)\nres &lt;- split\n\nres2 &lt;- res\nres2[[\"Kings\"]] &lt;- c(\"Student A\", \"Student B\") \n\nprint(res)\nprint(res2)\n\n\nAnswer\n\n\n\n[1] \"res -----------------\"\n\n\n$Kings\n[1] \"Student A\" \"Student B\" \"Student C\" \"Student D\" \"Student E\" \"Student F\"\n\n$Jack\n[1] \"Student G\" \"Student H\" \"Student I\" \"Student J\" \"Student K\"\n\n$Aces\n[1] \"Student L\" \"Student M\" \"Student N\" \"Student O\" \"Student P\"\n\n$Queens\n[1] \"Student Q\" \"Student R\" \"Student S\" \"Student T\" \"Student U\"\n\n$Tens\n[1] \"Student V\" \"Student W\" \"Student X\" \"Student Y\" \"Student Z\"\n\n\n[1] \"res2 -----------------\"\n\n\n$Kings\n[1] \"Student A\" \"Student B\"\n\n$Jack\n[1] \"Student G\" \"Student H\" \"Student I\" \"Student J\" \"Student K\"\n\n$Aces\n[1] \"Student L\" \"Student M\" \"Student N\" \"Student O\" \"Student P\"\n\n$Queens\n[1] \"Student Q\" \"Student R\" \"Student S\" \"Student T\" \"Student U\"\n\n$Tens\n[1] \"Student V\" \"Student W\" \"Student X\" \"Student Y\" \"Student Z\"\n\n\n\nfrom string import ascii_uppercase\n\ndef create_students(num_students):\n    return [f\"Student {ascii_uppercase[i]}\" for i in range(num_students)]\n\ndef split_students(students, groups):\n\n    n = len(students) // len(groups)\n    remainder = len(students) % len(groups)\n    split = []\n    start = 0\n    for i in range(len(groups)):\n        end = start + n + (1 if i &lt; remainder else 0)\n        split.append(students[start:end])\n        start = end\n    return split\n\ncards = [\"Kings\", \"Jack\", \"Aces\", \"Queens\", \"Tens\"]\nstudents = create_students(20)\n\nsplit = split_students(students, cards)\nres = dict(zip(cards, split))\n\n## Now compare the result of creating a reference with the one in python \nres2 = res\n# if we change res2, does res change?\nres2[\"Kings\"] = [\"Student A\", \"Student B\"]\n\nprint(f\"{res=}\")\nprint(f\"{res2=}\")\n\n\nAnswer\n\n\n\nres={'Kings': ['Student A', 'Student B'], 'Jack': ['Student E', 'Student F', 'Student G', 'Student H'], 'Aces': ['Student I', 'Student J', 'Student K', 'Student L'], 'Queens': ['Student M', 'Student N', 'Student O', 'Student P'], 'Tens': ['Student Q', 'Student R', 'Student S', 'Student T']}\n\n\nres2={'Kings': ['Student A', 'Student B'], 'Jack': ['Student E', 'Student F', 'Student G', 'Student H'], 'Aces': ['Student I', 'Student J', 'Student K', 'Student L'], 'Queens': ['Student M', 'Student N', 'Student O', 'Student P'], 'Tens': ['Student Q', 'Student R', 'Student S', 'Student T']}"
  },
  {
    "objectID": "git_exercises.html",
    "href": "git_exercises.html",
    "title": "Git Exercises",
    "section": "",
    "text": "In this exercise we will test how well you know how to set up Git in your workin directory.\n\n\nHow would you set up Git in your working directory ?\n\n\n\n\n\n\nYour turn!\n\n\n\nIdentify the set of commands needed to set up Git on your machine!\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s say you changed, added or removed some files in the course of your work. How will you make these changes known to your colleagues?\n\n\n\n\n\n\nYour turn!\n\n\n\nIdentify the commands needed to share your changes with others!"
  },
  {
    "objectID": "git_exercises.html#exercise-1",
    "href": "git_exercises.html#exercise-1",
    "title": "Git Exercises",
    "section": "",
    "text": "How would you set up Git in your working directory ?\n\n\n\n\n\n\nYour turn!\n\n\n\nIdentify the set of commands needed to set up Git on your machine!"
  },
  {
    "objectID": "git_exercises.html#exercise-2",
    "href": "git_exercises.html#exercise-2",
    "title": "Git Exercises",
    "section": "",
    "text": "Let’s say you changed, added or removed some files in the course of your work. How will you make these changes known to your colleagues?\n\n\n\n\n\n\nYour turn!\n\n\n\nIdentify the commands needed to share your changes with others!"
  },
  {
    "objectID": "git_exercises.html#exercise-1-1",
    "href": "git_exercises.html#exercise-1-1",
    "title": "Git Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\nHow do you go about ensuring that you don’t get in eachothers way when working?"
  },
  {
    "objectID": "git_exercises.html#exercise-2-1",
    "href": "git_exercises.html#exercise-2-1",
    "title": "Git Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\nLet’s say you while you were away, you aren’t sure whether your teammates were working on your project or not. What do you do before working again?"
  },
  {
    "objectID": "git_exercises.html#exercise-3",
    "href": "git_exercises.html#exercise-3",
    "title": "Git Exercises",
    "section": "Exercise 3",
    "text": "Exercise 3\nCommit messages are a good way to document your progress, for yourself and your teammates\n\n\n\n\n\n\nYour turn!\n\n\n\nTick the following commit messages which you should avoid!"
  },
  {
    "objectID": "git_exercises.html#exercise-1-2",
    "href": "git_exercises.html#exercise-1-2",
    "title": "Git Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\n\n\n\n\nCaution\n\n\n\nCross all options which you could use to solve the issue of diverging branches.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIf you have had trouble with these exercises, you might want to try the following resources:\n\nH4Sci-Tasks 1-3\nGit Katas"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "H4Sci Exercises",
    "section": "",
    "text": "This website is aimed to test your knowledge of the course content you have learnt in the H4Sci Course. Click the links below to get started.\nGit Exercises - Block 1\nProgramming Exercises - Block 2"
  }
]